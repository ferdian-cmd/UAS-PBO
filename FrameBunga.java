/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package percobaan9;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
 import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import javax.imageio.ImageIO;
/**
 *
 * @author ferdian
 */
public class FrameBunga extends javax.swing.JFrame {
private Connection connection;
    /**
     * Creates new form FrameBunga
     */
    public FrameBunga() {
        initComponents();
        connection = KoneksiDB.getConnection();  // Koneksi ke database
        loadData();  // Memuat data awal ke tabel
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        btnTambah = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        btnCari = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TblBunga = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtNamaBunga = new javax.swing.JTextField();
        txtStokBunga = new javax.swing.JTextField();
        txtHargaBunga = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtID_Bungga = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        lblPhoto = new javax.swing.JLabel();
        btnGambar = new javax.swing.JButton();
        txtPathFoto = new javax.swing.JTextField();

        jLabel5.setText("jLabel5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnTambah.setText("Tambah");
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        btnCari.setText("Cari");
        btnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCariActionPerformed(evt);
            }
        });

        TblBunga.setBackground(new java.awt.Color(102, 102, 255));
        TblBunga.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        TblBunga.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TblBunga.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TblBungaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TblBunga);

        jLabel1.setFont(new java.awt.Font("Serif", 1, 14)); // NOI18N
        jLabel1.setText("TAMBAH BUNGGA STOK BUNGA");

        txtNamaBunga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNamaBungaActionPerformed(evt);
            }
        });

        txtStokBunga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStokBungaActionPerformed(evt);
            }
        });

        txtHargaBunga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHargaBungaActionPerformed(evt);
            }
        });

        jLabel2.setText("Nama Bunga");

        jLabel3.setText("Stok");

        jLabel4.setText("Harga");

        txtID_Bungga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtID_BunggaActionPerformed(evt);
            }
        });

        jLabel6.setText("ID Bungga");

        btnGambar.setText("Gambar");
        btnGambar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGambarActionPerformed(evt);
            }
        });

        txtPathFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPathFotoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addGap(2, 2, 2))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel6)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNamaBunga)
                            .addComponent(txtStokBunga, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                            .addComponent(txtPathFoto)
                            .addComponent(txtHargaBunga, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                            .addComponent(txtID_Bungga)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnTambah)
                        .addGap(18, 18, 18)
                        .addComponent(btnEdit)))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnHapus)
                        .addGap(18, 18, 18)
                        .addComponent(btnCari))
                    .addComponent(lblPhoto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGambar)
                .addGap(0, 200, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(btnGambar))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtID_Bungga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtNamaBunga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtStokBunga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtHargaBunga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPathFoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnHapus)
                    .addComponent(btnCari)
                    .addComponent(btnEdit)
                    .addComponent(btnTambah))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahActionPerformed
     // Mendapatkan input dari pengguna
    String idText = txtID_Bungga.getText();
    String nama = txtNamaBunga.getText();
    String stokText = txtStokBunga.getText();
    String hargaText = txtHargaBunga.getText();
    String pathFoto = txtPathFoto.getText();

    // Validasi input
    if (idText.isEmpty() || nama.isEmpty() || stokText.isEmpty() || hargaText.isEmpty() || pathFoto.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Semua field harus diisi!");
        return;
    }

    try {
        int id = Integer.parseInt(idText);
        int stok = Integer.parseInt(stokText);
        double harga = Double.parseDouble(hargaText);

        if (id < 0 || stok < 0 || harga < 0) {
            JOptionPane.showMessageDialog(this, "ID, stok, dan harga harus bernilai positif!");
            return;
        }

        // Eksekusi query SQL
        String query = "INSERT INTO Bunga (bunga_id, nama_bunga, stok, harga, path_foto) VALUES (?, ?, ?, ?, ?)";
        Connection conn = null;
        PreparedStatement statement = null;
        try {
            conn = KoneksiDB.getConnection();
            statement = conn.prepareStatement(query);
            statement.setInt(1, id);
            statement.setString(2, nama);
            statement.setInt(3, stok);
            statement.setDouble(4, harga);
            statement.setString(5, pathFoto);
            statement.executeUpdate();
            JOptionPane.showMessageDialog(this, "Bunga berhasil ditambahkan.");

            // Memuat ulang data setelah penambahan
            loadData();
            clearFields();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error menambah data: " + e.getMessage());
        } finally {
            try {
                if (statement != null) statement.close();
                if (conn != null) conn.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "ID, stok harus berupa angka bulat dan harga harus berupa angka desimal!");
    }
    
    }//GEN-LAST:event_btnTambahActionPerformed

    private void txtNamaBungaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNamaBungaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNamaBungaActionPerformed

    private void txtStokBungaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStokBungaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStokBungaActionPerformed

    private void txtHargaBungaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHargaBungaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHargaBungaActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
   int selectedRow = TblBunga.getSelectedRow();
    if (selectedRow != -1) {
        // Ambil nilai bunga_id lama dari tabel
        int bungaIdLama = Integer.parseInt(TblBunga.getValueAt(selectedRow, 0).toString());

        // Ambil nilai dari JTextField
        String idBaruStr = txtID_Bungga.getText().trim();
        String nama = txtNamaBunga.getText().trim();
        String stokStr = txtStokBunga.getText().trim();
        String hargaStr = txtHargaBunga.getText().trim();
        String pathFoto = txtPathFoto.getText().trim();  // Ambil path foto yang disimpan di txtPathFoto

        // Validasi input
        if (idBaruStr.isEmpty() || nama.isEmpty() || stokStr.isEmpty() || hargaStr.isEmpty() || pathFoto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Semua field harus diisi!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Konversi input ke tipe data yang sesuai
            int bungaIdBaru = Integer.parseInt(idBaruStr);
            int stok = Integer.parseInt(stokStr);
            double harga = Double.parseDouble(hargaStr);

            // Periksa jika ID baru sama dengan ID lama, lakukan update biasa
            if (bungaIdBaru == bungaIdLama) {
                String query = "UPDATE Bunga SET nama_bunga = ?, stok = ?, harga = ?, path_foto = ? WHERE bunga_id = ?";
                try (Connection conn = KoneksiDB.getConnection();
                     PreparedStatement statement = conn.prepareStatement(query)) {
                    statement.setString(1, nama);
                    statement.setInt(2, stok);
                    statement.setDouble(3, harga);
                    statement.setString(4, pathFoto);  // Menyimpan path foto
                    statement.setInt(5, bungaIdBaru);
                    statement.executeUpdate();
                }
            } else {
                // Jika ID diubah, update ID juga (perlu dua langkah)
                String queryUpdate = "UPDATE Bunga SET bunga_id = ?, nama_bunga = ?, stok = ?, harga = ?, path_foto = ? WHERE bunga_id = ?";
                try (Connection conn = KoneksiDB.getConnection();
                     PreparedStatement statement = conn.prepareStatement(queryUpdate)) {
                    statement.setInt(1, bungaIdBaru);
                    statement.setString(2, nama);
                    statement.setInt(3, stok);
                    statement.setDouble(4, harga);
                    statement.setString(5, pathFoto);  // Menyimpan path foto
                    statement.setInt(6, bungaIdLama);
                    statement.executeUpdate();
                }
            }

            JOptionPane.showMessageDialog(this, "Data bunga berhasil diedit.");
            loadData();  // Memuat ulang data setelah pengeditan
            clearFields();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Input tidak valid! Pastikan ID, stok, dan harga adalah angka yang valid.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error mengedit data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Pilih bunga yang ingin diedit.", "Info", JOptionPane.INFORMATION_MESSAGE);
    }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        int selectedRow = TblBunga.getSelectedRow();
        if (selectedRow != -1) {
            int bungaId = (int) TblBunga.getValueAt(selectedRow, 0);
            try {
                String query = "DELETE FROM Bunga WHERE bunga_id = ?";
                PreparedStatement statement = connection.prepareStatement(query);
                statement.setInt(1, bungaId);
                statement.executeUpdate();
                JOptionPane.showMessageDialog(this, "Bunga berhasil dihapus.");
                loadData();  // Memuat ulang data setelah penghapusan
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error menghapus data: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Pilih bunga yang ingin dihapus.");
        }
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCariActionPerformed
    int row = TblBunga.getSelectedRow();  // Mendapatkan indeks baris yang dipilih
    if (row == -1) {
        return;  // Jika tidak ada baris yang dipilih, keluar dari metode
    }
    
    // Mengambil data dari baris yang dipilih
    String idBunga = TblBunga.getValueAt(row, 0).toString();
    String namaBunga = TblBunga.getValueAt(row, 1).toString();
    String stok = TblBunga.getValueAt(row, 2).toString();
    String harga = TblBunga.getValueAt(row, 3).toString();
    String pathFoto = TblBunga.getValueAt(row, 4).toString();  // Ambil path foto dari kolom yang sesuai
    
    // Mengisi field input
    txtID_Bungga.setText(idBunga);
    txtNamaBunga.setText(namaBunga);
    txtStokBunga.setText(stok);
    txtHargaBunga.setText(harga);
    
    // Menampilkan gambar bunga pada label
    if (pathFoto != null && !pathFoto.isEmpty()) {
        try {
            File fotoFile = new File(pathFoto);
            if (fotoFile.exists()) {
                BufferedImage img = ImageIO.read(fotoFile);
                Image scaledImg = img.getScaledInstance(lblPhoto.getWidth(), lblPhoto.getHeight(), Image.SCALE_SMOOTH);
                lblPhoto.setIcon(new ImageIcon(scaledImg));
            } else {
                lblPhoto.setIcon(null);  // Jika gambar tidak ditemukan
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Gagal memuat gambar: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        lblPhoto.setIcon(null);  // Jika tidak ada path foto
    }
    }//GEN-LAST:event_btnCariActionPerformed

    private void TblBungaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TblBungaMouseClicked
     int row = TblBunga.getSelectedRow();  // Mendapatkan indeks baris yang dipilih
    if (row == -1) {
        return;  // Jika tidak ada baris yang dipilih, keluar dari metode
    }

    // Mengambil data dari baris yang dipilih dengan validasi null
    Object idBungaObj = TblBunga.getValueAt(row, 0);
    Object namaBungaObj = TblBunga.getValueAt(row, 1);
    Object stokObj = TblBunga.getValueAt(row, 2);
    Object hargaObj = TblBunga.getValueAt(row, 3);
    Object pathFotoObj = TblBunga.getValueAt(row, 4);

    String idBunga = idBungaObj != null ? idBungaObj.toString() : "";
    String namaBunga = namaBungaObj != null ? namaBungaObj.toString() : "";
    String stok = stokObj != null ? stokObj.toString() : "";
    String harga = hargaObj != null ? hargaObj.toString() : "";
    String pathFoto = pathFotoObj != null ? pathFotoObj.toString() : "";

    // Mengisi field input
    txtID_Bungga.setText(idBunga);
    txtNamaBunga.setText(namaBunga);
    txtStokBunga.setText(stok);
    txtHargaBunga.setText(harga);

    // Menampilkan gambar bunga pada label
    if (!pathFoto.isEmpty()) {
        try {
            File fotoFile = new File(pathFoto);
            if (fotoFile.exists()) {
                BufferedImage img = ImageIO.read(fotoFile);
                Image scaledImg = img.getScaledInstance(lblPhoto.getWidth(), lblPhoto.getHeight(), Image.SCALE_SMOOTH);
                lblPhoto.setIcon(new ImageIcon(scaledImg));
            } else {
                lblPhoto.setIcon(null);  // Jika gambar tidak ditemukan
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Gagal memuat gambar: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        lblPhoto.setIcon(null);  // Jika tidak ada path foto
    }
    }//GEN-LAST:event_TblBungaMouseClicked

    private void txtID_BunggaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtID_BunggaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtID_BunggaActionPerformed

    private void btnGambarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGambarActionPerformed
 JFileChooser chooser = new JFileChooser();
    chooser.setDialogTitle("Pilih Foto");
    chooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Gambar (JPG, PNG)", "jpg", "jpeg", "png"));

    int result = chooser.showOpenDialog(null);
    if (result == JFileChooser.APPROVE_OPTION) {
        try {
            File file = chooser.getSelectedFile();
            if (file != null) {
                // Menampilkan gambar pada label
                BufferedImage img = ImageIO.read(file);
                Image scaledImg = img.getScaledInstance(lblPhoto.getWidth(), lblPhoto.getHeight(), Image.SCALE_SMOOTH);
                lblPhoto.setIcon(new ImageIcon(scaledImg));

                // Simpan path foto ke field txtPathFoto
                txtPathFoto.setText(file.getAbsolutePath());
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Gagal mengunggah gambar: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }    
    }//GEN-LAST:event_btnGambarActionPerformed

    private void txtPathFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPathFotoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPathFotoActionPerformed

    private void loadData() {
    DefaultTableModel model = new DefaultTableModel();
    model.addColumn("ID Bunga");
    model.addColumn("Nama Bunga");
    model.addColumn("Stok");
    model.addColumn("Harga");
    model.addColumn("Path Foto");

    try {
        String query = "SELECT * FROM Bunga";  // Query untuk mengambil semua data bunga
        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery(query);

        while (resultSet.next()) {
            model.addRow(new Object[]{
                resultSet.getInt("bunga_id"),
                resultSet.getString("nama_bunga"),
                resultSet.getInt("stok"),
                resultSet.getDouble("harga"),
                resultSet.getString("path_foto")
            });
        }

        TblBunga.setModel(model);  // Menampilkan data pada tabel
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error memuat data: " + e.getMessage());
    }
}
    private void clearFields() {
    txtID_Bungga.setText("");
    txtNamaBunga.setText("");
    txtStokBunga.setText("");
    txtHargaBunga.setText("");
    txtPathFoto.setText("");
    lblPhoto.setIcon(null);
    txtID_Bungga.requestFocus();
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameBunga().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TblBunga;
    private javax.swing.JButton btnCari;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnGambar;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnTambah;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPhoto;
    private javax.swing.JTextField txtHargaBunga;
    private javax.swing.JTextField txtID_Bungga;
    private javax.swing.JTextField txtNamaBunga;
    private javax.swing.JTextField txtPathFoto;
    private javax.swing.JTextField txtStokBunga;
    // End of variables declaration//GEN-END:variables
}
